                            Document Object Model

The Document Object Model (DOM) is a programming interface that represents an HTML, XML, 
or XHTML document as a structured tree of objects. It allows programming languages like 
JavaScript to interact with and manipulate the structure, style, and content of a webpage 
dynamically.

# Important Terms :-
1. Programming Interface:
The DOM provides methods and properties that enable developers to access and modify the 
content, structure, and style of a document programmatically.

2. Tree Structure:
The DOM represents the HTML document as a tree of nodes. Each element, attribute, and piece 
of text in the HTML document becomes a node in the tree.

For Example :-
<html>
  <head>
    <title>Document Title</title>
  </head>
  <body>
    <h1>Hello, World!</h1>
    <p>This is a paragraph.</p>
  </body>
</html>

The above HTML becomes a hierarchical tree:-
Document
└── html
    ├── head
    │   └── title
    │       └── "Document Title"
    └── body
        ├── h1
        │   └── "Hello, World!"
        └── p
            └── "This is a paragraph."

3. Node Types in the DOM:-
1) Element Nodes: Represent HTML tags (e.g., <div>, <p>, <h1>).
2) Text Nodes: Represent the text content inside elements.
3) Attribute Nodes: Represent the attributes of HTML elements (e.g., class="example", id="header").

4. Dynamic Nature:-
1) Using JavaScript, you can manipulate the DOM dynamically:
2) Add, remove, or modify HTML elements and attributes.
3) Change CSS styles.
4) Respond to user interactions like clicks, scrolls, or input.

# How HTML Becomes DOM Nodes:-
When a browser loads an HTML page:

1. Parse the HTML:
-The browser parses the HTML document line by line and converts it into a DOM tree.

2. Convert Tags into Nodes:
-Each HTML tag becomes an element node.
-The content inside the tags becomes a text node.

3. Relationship Between Nodes:
The DOM tree establishes relationships:
-Parent Node: An element that contains other nodes.
-Child Nodes: Nodes that are directly inside a parent node.
-Sibling Nodes: Nodes that share the same parent.

Example : 
<div id="container">
  <h1>Welcome</h1>
  <p>Hello, World!</p>
</div>

DOM Representation:-

div (id="container") → Parent Node
├── h1 → Child Node
│   └── "Welcome" → Text Node
└── p → Child Node
    └── "Hello, World!" → Text Node


# Why is the DOM Important?

1. Interaction with Web Pages:
Developers can write JavaScript to interact with the DOM to create dynamic, interactive 
websites.

2. Dynamic Updates:
Content and style can be updated in real-time without reloading the page.
Example: Adding new elements, updating text, or applying animations.

3. Event Handling:
The DOM allows you to handle user interactions (e.g., clicks, form submissions) using 
JavaScript event listeners.

### How to Access the DOM Using JavaScript:-
The document object is the root of the DOM in JavaScript. You can use various methods to select
and manipulate elements:

1. Selecting Elements:-
-By ID: document.getElementById("id")
-By Class: document.getElementsByClassName("class")
-By Tag: document.getElementsByTagName("tag")
-By CSS Selector: document.querySelector("selector"), document.querySelectorAll("selector")

2. Manipulating Elements:-
-Change content: element.textContent or element.innerHTML
-Add styles: element.style
-Add/remove classes: element.classList

## Common Use Cases for DOM Manipulation
1. Dynamic Content:
Adding new elements (e.g., comments on a blog post).

2. Form Validation:
Highlight invalid fields.

3. Interactive Features:
Dropdown menus, modals, and sliders.

4. Animations:
Animating elements using JavaScript.



